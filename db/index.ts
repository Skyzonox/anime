// db/index.ts
import { drizzle } from 'drizzle-orm/expo-sqlite';
import { openDatabaseSync } from 'expo-sqlite';
import * as schema from './schema';

// Cr√©ation de la base de donn√©es SQLite
const expo = openDatabaseSync('anime-collect.db');
export const db = drizzle(expo, { schema });

export async function initDatabase() {
  try {
    console.log('üîÑ Initialisation de la base de donn√©es...');
    
    // Cr√©er les tables si elles n'existent pas
    await expo.execAsync(`
      CREATE TABLE IF NOT EXISTS collection_animes (
        id TEXT PRIMARY KEY,
        titre TEXT NOT NULL,
        titre_original TEXT,
        synopsis TEXT,
        image_url TEXT,
        note_api REAL,
        statut TEXT,
        nombre_episodes_total INTEGER,
        date_ajout TEXT NOT NULL,
        date_modification TEXT NOT NULL
      );
    `);

    await expo.execAsync(`
      CREATE TABLE IF NOT EXISTS episodes_vus (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        anime_id TEXT NOT NULL,
        numero_episode INTEGER NOT NULL,
        titre_episode TEXT,
        date_vu TEXT NOT NULL,
        note_personnelle INTEGER,
        UNIQUE(anime_id, numero_episode)
      );
    `);

    await expo.execAsync(`
      CREATE TABLE IF NOT EXISTS liste_a_regarder (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        anime_id TEXT NOT NULL,
        titre TEXT NOT NULL,
        image_url TEXT,
        date_ajout TEXT NOT NULL,
        priorite INTEGER DEFAULT 1
      );
    `);

    await expo.execAsync(`
      CREATE TABLE IF NOT EXISTS categories_animes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        anime_id TEXT NOT NULL,
        categorie TEXT NOT NULL
      );
    `);

    // Cr√©er les index pour am√©liorer les performances
    await expo.execAsync(`
      CREATE INDEX IF NOT EXISTS idx_episodes_vus_anime_id ON episodes_vus(anime_id);
    `);

    await expo.execAsync(`
      CREATE INDEX IF NOT EXISTS idx_collection_date_ajout ON collection_animes(date_ajout);
    `);

    await expo.execAsync(`
      CREATE INDEX IF NOT EXISTS idx_liste_a_regarder_anime_id ON liste_a_regarder(anime_id);
    `);

    console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
    throw error;
  }
}

// Fonction pour v√©rifier si la base de donn√©es est pr√™te
export async function isDatabaseReady(): Promise<boolean> {
  try {
    // Tester une simple requ√™te pour v√©rifier si la DB est accessible
    await expo.execAsync('SELECT 1');
    return true;
  } catch (error) {
    console.error('‚ùå Base de donn√©es non accessible:', error);
    return false;
  }
}

// Fonction pour nettoyer la base de donn√©es (utile pour les tests)
export async function clearDatabase() {
  try {
    await expo.execAsync('DELETE FROM episodes_vus');
    await expo.execAsync('DELETE FROM categories_animes');
    await expo.execAsync('DELETE FROM liste_a_regarder');
    await expo.execAsync('DELETE FROM collection_animes');
    console.log('üßπ Base de donn√©es nettoy√©e');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
    throw error;
  }
}